<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Methods | ABZ</title><link>/methods/</link><atom:link href="/methods/index.xml" rel="self" type="application/rss+xml"/><description>Methods</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright Â© 2024 ABZ Conference</copyright><image><url>/img/https:/github.com/abz-conf/abz-conf.logo/raw/master/obj/rect/256.png</url><title>Methods</title><link>/methods/</link></image><item><title>Alloy</title><link>/method/alloy/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>/method/alloy/</guid><description>&lt;p>The Alloy language can be used to describe structures based on a collection of constraints. This created Alloy model can then be analyzed by the Alloy Analyzer, a solver that finds concrete structures that satisfy the constraints defined in the Alloy model.
The analysis can be used to generate sample structures or to check properties of these structures by trying to generate counterexamples. Alloy is based on the Z specification language and Tarski&amp;rsquo;s relational calculus.&lt;/p>
&lt;p>
&lt;a href="http://alloytools.org/" target="_blank" rel="noopener">http://alloytools.org/&lt;/a>&lt;/p></description></item><item><title>B / Event-B</title><link>/method/b/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>/method/b/</guid><description>&lt;p>Classical B (or just B) focuses on a tool-based refinement of a formal specification to code. It is based on the Z notation but slightly more low-level. In B a system consists of an abstract machine in which the modeler specifies the goal of the system. Via several refinement steps, this abstract goal is enhanced by more details on a less abstract level by adding details about data structures and algorithms that define how the goal is achieved.
All steps are proven correct until a deterministic version (the implementation) is reached.&lt;/p>
&lt;p>
&lt;a href="https://methode-b.com" target="_blank" rel="noopener">https://methode-b.com&lt;/a>&lt;/p>
&lt;p>Event-B is an evolution of B with a simpler notation. Similar to B a system is modeled by different abstraction levels that are connected by a rigorous refinement proven correct. Whereas the B-method is intended to the development of correct-by-construction software, the purpose of Event-B is to model full systems (including hardware and operation environment). These two languages share almost the same mathematical language.&lt;/p>
&lt;p>
&lt;a href="http://www.event-b.org/" target="_blank" rel="noopener">http://www.event-b.org/&lt;/a>&lt;/p></description></item><item><title>Temporal Logic of Actions (TLA)</title><link>/method/tla/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>/method/tla/</guid><description>&lt;p>TLA+ (Temporal Logic of Actions) was developed by Leslie Lamport to model, document, and verify especially concurrent and distributed systems. The language aims for defining the set of all correct system behaviors. It is organized in modules that contain a definition of states and (conditional) state transitions in form of steps. A &amp;ldquo;next-state-relations&amp;rdquo; defines how variables can change in any step. Similar to Z, B, and Event-B TLA+ is based on the Zermelo-Fraenkel set theory, but extended with built-in temporal logic operators.&lt;/p>
&lt;p>
&lt;a href="http://lamport.azurewebsites.net/tla/tla.html" target="_blank" rel="noopener">http://lamport.azurewebsites.net/tla/tla.html&lt;/a>&lt;/p></description></item><item><title>Vienna Development Method (VDM)</title><link>/method/vdm/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>/method/vdm/</guid><description>&lt;p>In the Vienna Development Method (VDM) models consist of a rich representation of data on which a system operates, together with the functionality that should be executed on these data structures. Besides the internal data also external input/output data is considered in the models.&lt;/p>
&lt;p>The functional behavior can be either defined abstract by pre- and postconditions or explicitly by specific state-based operations. The precise mathematical semantics of these definitions allows for a wide range of analyses, e.g. static analysis, testing or proof of properties of the sytem.&lt;/p>
&lt;p>
&lt;a href="https://www.overturetool.org/method/" target="_blank" rel="noopener">https://www.overturetool.org/method/&lt;/a>&lt;/p></description></item><item><title>Z Notation</title><link>/method/z/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>/method/z/</guid><description>&lt;p>Z is the &amp;ldquo;ultimate language&amp;rdquo; as stated by
&lt;a href="https://en.wikipedia.org/wiki/Jean-Raymond_Abrial" target="_blank" rel="noopener">Jean-Raymond Abrial&lt;/a> who invented this formal specification language in 1977. This language aims for a precise and clear specification of computer-based systems based on the Zermelo-Fraenkel set theory, lambda calculus, and first-order predicate logic. The main elements of Z are so-called &amp;ldquo;schemata&amp;rdquo; that consist of typed variables and constraints on the assignment of these. Z provides a standardized catalogue of often used mathematical functions and predicates.&lt;/p>
&lt;p>
&lt;a href="http://www.zuser.org/" target="_blank" rel="noopener">http://www.zuser.org/&lt;/a>&lt;/p></description></item></channel></rss>