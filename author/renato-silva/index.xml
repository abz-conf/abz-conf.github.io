<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Renato Silva | ABZ</title><link>/author/renato-silva/</link><atom:link href="/author/renato-silva/index.xml" rel="self" type="application/rss+xml"/><description>Renato Silva</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright Â© 2025 ABZ Conference</copyright><lastBuildDate>Sun, 01 Jan 2012 00:00:00 +0000</lastBuildDate><image><url>/img/https:/github.com/abz-conf/abz-conf.logo/raw/master/obj/rect/256.png</url><title>Renato Silva</title><link>/author/renato-silva/</link></image><item><title>Event-B Code Generation: Type Extension with Theories</title><link>/publication/edmundsbmsl12/</link><pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate><guid>/publication/edmundsbmsl12/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>The Event-B method is a formal modelling approach; our interest is the final step, of generating code for concurrent programs, from Event-B. Our Tasking Event-B tool integrates Event-B to facilitate code generation. The theory plug-in allows mathematical extensions to be added to an Event-B development. When working at the implementation level we need to consider how to translate the newly added types and operators into code. In this paper, we augment the theory plug-in, by adding a Translation Rules section to the tool. This enables us to define translation rules that map Event-B formulas to code. We illustrate the approach using a small case study, where we add a theory of arrays, and specify translation rules for generating Ada code.&lt;/p>
&lt;h2 id="document">Document&lt;/h2>
&lt;p>If you cannot see the document below, the PDF document is most likely not freely accessible. In this case, please try to access the document via this &lt;a href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-30885-7_33.pdf">link&lt;/a>.&lt;/p>
&lt;div id="pdfobject-viewer">&lt;/div>
&lt;script src="/js/pdfobject.min.js">&lt;/script>
&lt;script>
var url = "https:\/\/link.springer.com\/content\/pdf\/10.1007%2F978-3-642-30885-7_33.pdf";
PDFObject.embed( url, "#pdfobject-viewer" );
&lt;/script>
&lt;style>
.pdfobject-container
{
height: 30rem;
}
&lt;/style>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;pre>&lt;code>% BibTex
@inproceedings{EdmundsBMSL12,
author = {Andrew Edmunds and
Michael J. Butler and
Issam Maamria and
Renato Silva and
Chris Lovell},
editor = {John Derrick and
John S. Fitzgerald and
Stefania Gnesi and
Sarfraz Khurshid and
Michael Leuschel and
Steve Reeves and
Elvinia Riccobene},
title = {Event-B Code Generation: Type Extension with Theories},
booktitle = {Abstract State Machines, Alloy, B, VDM, and {Z} - Third International
Conference, {ABZ} 2012, Pisa, Italy, June 18-21, 2012. Proceedings},
series = {Lecture Notes in Computer Science},
volume = {7316},
pages = {365--368},
publisher = {Springer},
year = {2012},
url = {https://doi.org/10.1007/978-3-642-30885-7\_33},
doi = {10.1007/978-3-642-30885-7\_33},
timestamp = {Sun, 02 Jun 2019 21:23:59 +0200},
biburl = {https://dblp.org/rec/conf/asm/EdmundsBMSL12.bib},
bibsource = {dblp computer science bibliography, https://dblp.org}
}
&lt;/code>&lt;/pre>
&lt;!-- # add information for case study papers (if available)
## Sources
- **Used formal method:**
[ASM](/method/asm)
- **Resources and tools:**
Asmeta
For more information, please contact the &lt;a href ="mailto:silvia.bonfanti@unibg.it;arcaini@nii.ac.jp;angelo.gargantini@unibg.it;scandurra@unibg.it;elvinia.riccobene@unimi.it">authors&lt;/a>--></description></item></channel></rss>